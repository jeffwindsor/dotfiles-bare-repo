#!/usr/bin/env zsh

# base machine config
source $HOME/.config/machine/zshrc

# zsh plugins
source $ZSH_PLUGINS/zsh-autosuggestions/zsh-autosuggestions.zsh
source $ZSH_PLUGINS/zsh-history-substring-search/zsh-history-substring-search.zsh
source $ZSH_PLUGINS/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source /usr/local/etc/profile.d/autojump.sh
source $HOME/.fzf.zsh

green="$(tput setaf 2)"
reset="$(tput sgr0)"

aws-pro() {
    aws-assume-role 'cjorganization/CJProvisionerAccessRole' 3599 $1 $2
}
aws-dev() {
    aws-assume-role 'cjorganization/CJDeveloperAccessRole' 43199 $1 $2
}
aws-assume-role() {
    local user='597974043991:mfa/jwindsor@cj.com'
    local region='us-west-1'
    local role=$1
    local duration=$2
    local account=$3
    local token=$4

    #end session
    eval $(env | sed -En 's/^(AWS_[^=]*)=.*$/unset \1/p');

    #add new session
    if [[ -z $token ]]; then
        read -r token"MFA Token? "
    fi

    eval "$(aws sts assume-role \
        --role-arn "arn:aws:iam::${account}:role/${role}" \
        --role-session-name "jmw$$" \
        --serial-number "arn:aws:iam::${user}" \
        --token-code "$token" \
        --duration-seconds $duration \
        --region $region \
        --query \
        'Credentials |
            join (`\n`,
            values({
                AccessKeyId: join(``, [`export AWS_ACCESS_KEY_ID=`,AccessKeyId]),
                SecretAccessKey:join(``, [`export AWS_SECRET_ACCESS_KEY=`,SecretAccessKey]),
                SessionToken:join(``, [`export AWS_SESSION_TOKEN=`,SessionToken])
            }))' \
        --output text)"
}
aoc () {
    open "$(aws-get-url-inline)"
}
aws-get-url-inline () {
	python3 <<EOF
import http.client
import json
import urllib.parse
result = json.dumps({
  "sessionId": "$AWS_ACCESS_KEY_ID",
  "sessionKey": "$AWS_SECRET_ACCESS_KEY",
  "sessionToken": "$AWS_SESSION_TOKEN"
})
path = '/federation?Action=getSigninToken&Session=' + urllib.parse.quote_plus(result, safe="")
conn = http.client.HTTPSConnection("signin.aws.amazon.com")
conn.request("GET", path)
rq = conn.getresponse()
if rq.status != 200:
  raise Exception('request failed because %s', rq.reason)
data = json.load(rq)
signin_token = data['SigninToken']
# print('https://signin.aws.amazon.com/federation?Action=login&Destination=https%3A%2F%2Fconsole.aws.amazon.com/console/home?region=us-west-1&SigninToken='+signin_token)
print('https://signin.aws.amazon.com/federation?Action=login&Destination=https%3A%2F%2Fconsole.aws.amazon.com&SigninToken='+signin_token)
EOF
}
aes () { eval $(env | sed -En 's/^(AWS_[^=]*)=.*$/unset \1/p'); }
aws-cloudfront-describe () { aws cloudformation describe-stacks --stack-name "$@"; }
aws-cloudfront-describe-status () { aws-cloudfront-describe $@ | grep StackStatus; }
brews() {
    local result=$(brew search --formulae | fzf -m --preview="brew info {}" --preview-window=:hidden --bind=space:toggle-preview)
    [ ! -z "$result" ] && brew install "$result"
}
casks() {
    local result=$(brew search --casks | fzf -m --preview="brew cask info {}" --preview-window=:hidden --bind=space:toggle-preview)
    [ ! -z "$result" ] && brew cask install "$result"
}
patch-update(){ ssh -t ${1} "sudo /usr/sbin/cnvr-patch update"; }
patch-query() { ssh -t ${1} "sudo /usr/sbin/cnvr-patch query"; }
stack-new(){
    stack new $1 && cd $1 && stack setup && stack build;
    }
say(){
    echo "${green}${1}${reset}"
}

alias acd="aws-cloudfront-describe"
alias acd="aws-cloudfront-describe-status"
alias bc="brew cask"
alias bi="brew info"
alias bl="brew leaves | xargs brew deps --installed --for-each | sed \"s/^.*:/$(tput setaf 4)&$(tput sgr0)/\""
alias bl="brew list && brew cask list && mas list"
alias bs="brew search"
alias bundle_name="osascript -e 'id of app"
alias caskroom="cd /usr/local/Caskroom && l"
alias cat='bat -p'
alias cellar="cd /usr/local/Cellar && l"
alias d='dirs -v | head -10'
alias dbstart="nohup VBoxHeadless --startvm 'Oracle11g32' &> /dev/null &"
alias dbstop="VBoxManage controlvm Oracle11g32 poweroff"
alias dkl='docker ps -a'
alias dkr='docker run --rm'
alias dkrh='docker run --rm -d -p 8081:80'
alias dkrt='docker run --rm -it'
alias f='vifm'
alias grep='rg'
alias java11='export JAVA_HOME=`/usr/libexec/java_home -v 11`'
alias java15='export JAVA_HOME=`/usr/libexec/java_home -v 15`'
alias java8='export JAVA_HOME=`/usr/libexec/java_home -v 1.8.0_202`'
alias l='exa -1Fa --group-directories-first'
alias ll='exa --long --all --group-directories-first'
alias lt='exa --tree --level=2'
alias mc='k && java8 && mvn clean && java11'
alias mci='k && java8 && mvn clean install && java11'
alias mf="mas info"
alias mi="mas install"
alias ml="mas list"
alias mnt='java8 && mvn -Dmaven.test.skip=true install && java11'
alias mr="mas uninstall"
alias ms="mas search"
alias mup="mas upgrade"
alias qb='java8 && mvn clean install -T 1C -Ddelta.skip=true -Dcleanup.skip=true -Dqunit.numThreads=8 -DskipTests -Dtablespaces.skip=true -Dgulp.task=min && java11'
alias qqb='java8 && mvn install -T 1C -Ddelta.skip=true -Dcleanup.skip=true -Dqunit.numThreads=8 -DskipTests -Dtablespaces.skip=true -Dgulp.task=min && java11'
alias sb='stack build'
alias sc='stack clean'
alias sg='ghcid --command "stack repl" --test ":main"'
alias sha1="shasum -a 1 "
alias sha256="shasum -a 256 "
alias sha512="shasum -a 512 "
alias shopcart='sqlplus -L jwindsor@shopcart'
alias sinit='stack init'
alias sn='stack-new'
alias sr='stack repl'
alias st='stack test'
alias stt='stack ide targets'
alias sup='stack upgrade --force-download'
alias t1='sqlplus -L cj@tcjoweb1'
alias test-schemas='java -jar ./target/schemas-main-SNAPSHOT.one-jar.jar locator=T5 tnsnames=/USers/jwindsor/.local/cjdev/ci/tns-admin/tnsnames.ora'
alias tree='exa --tree'
alias vc='nvim $HOME/.config/machine/wl-jwindso-mac/zshrc'
alias ve='nvim $HOME/.config/machine/wl-jwindso-mac/zshenv'

[ -s "/usr/local/opt/nvm/etc/bash_completion" ] && source "/usr/local/opt/nvm/etc/bash_completion"  # This loads nvm bash_completion

# export MAVEN_OPTS="-Xmx4086m -XX:ReservedCodeCacheSize=256m"
# export MAVEN_OPTS="-Xmx10G -XX:ReservedCodeCacheSize=256m -Xss8G -XX:+UseG1GC -XX:+UseStringDeduplication"
# NVM =============================================
# export NVM_DIR="$HOME/.nvm"
# [ -s "/usr/local/opt/nvm/nvm.sh" ] && . "/usr/local/opt/nvm/nvm.sh"  # This loads nvm
# [ -s "/usr/local/opt/nvm/etc/bash_completion.d/nvm" ] && . "/usr/local/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

#function git-migrate(){
#    if [ ! -d "./${2}" ]
#    then
#        git clone "git@gitlab.cj.com:${1}/${2}.git"
#        pushd ${2}
#        git branch -r | rg -v '\->' | while read remote
#        do
#            git branch --track "${remote#origin/}" "$remote"
#        done
#        git fetch --all
#        git pull --all
#        git push --set-upstream "git@gitlab.cj.dev:${1}/${2}.git" master
#        git remote set-url origin "git@gitlab.cj.dev:${1}/${2}.git"
#        git push --all
#        git push --tags
#        popd
#    fi
#    open "http://gitlab.cj.com/${1}/${2}/commits/master"
#    open "https://gitlab.cj.dev/${1}/${2}/"
#    open "http://gitlab.cj.com/${1}/${2}/edit"
#    open "https://gitlab.cj.dev/${1}/${2}/edit#js-shared-permissions"
#}
# aws

