#!/usr/bin/env zsh

####################################################################
# ZSH Config
####################################################################
# General Options
export CLICOLOR=1
setopt LOCAL_OPTIONS EXTENDED_GLOB
setopt AUTO_MENU ALWAYS_TO_END AUTO_LIST NO_MENU_COMPLETE COMPLETE_IN_WORD NOMATCH
unsetopt FLOW_CONTROL
zstyle -e ':completion:*:(ssh|scp|sftp|rsh|rsync):hosts' hosts 'reply=(${=${${(f)"$(cat {/etc/ssh_,~/.ssh/known_}hosts(|2)(N) /dev/null)"}%%[# ]*}//,/ })'
zstyle ':completion:*:*:*:*:*' menu select
zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path $ZSH_CACHE_DIR
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command "ps -u $USER -o pid,user,comm -w -w"
setopt AUTO_CD AUTO_PUSHD PUSHD_IGNORE_DUPS
HISTSIZE=50000
SAVEHIST=10000
setopt extended_history
setopt hist_expire_dups_first
setopt hist_ignore_dups
setopt hist_ignore_space
setopt inc_append_history
setopt share_history
setopt NOTIFY
setopt PROMPT_SUBST
setopt MULTIOS CDABLE_VARS
unsetopt correctall BEEP

# load and comp init
autoload -Uz compinit
# speed improvement to only dump file once a day, not every load <https://carlosbecker.com/posts/speeding-up-zsh>
#if [ $(date +'%j') != $(/usr/bin/stat -f '%Sm' -t '%j' ${ZDOTDIR:-$HOME}/.zcompdump) ]; then
# compinit
#else
# compinit -C
#fi

###############################################################################
# PROMPT
###############################################################################
eval "$(starship init zsh)"

###############################################################################
# ALIASES
###############################################################################
alias k='clear'
alias kk='clear && reset'

# CODE 
alias hlsf='stack test haskell-language-server:test:func-test'
alias hlst='stack test haskell-language-server:test:tasty'

find-git-dirs () {
    find $1 -type d \( -exec test -d "{}/.git" -a "{}" != "." \; -print -prune -o -name .git -prune \)
}
exec-git-dirs () {
    local result=`find-git-dirs $2 | cut -d '/' -f5- | fzf --preview="tree -L 1 {}" --bind="space:toggle-preview" --preview-window=:hidden --reverse --height 40% | awk -v path="$2/" '{print path $0}'`
    [ ! -z "$result" ] && $1 $result
}
exec-files () {
    local result=`fd . "$2" -t f -d 2 -H --ignore-file $XDG_CONFIG_HOME/.fdignore | cut -d '/' -f5- | fzf --reverse --height 40%`
    [ ! -z "$result" ] && $1 "$2/$result"
}
alias src='exec-git-dirs cd $SRC'
alias srcv='exec-git-dirs vscodium $SRC'
alias srci='exec-git-dirs idea $SRC'
alias dots='exec-files nvim $XDG_CONFIG_HOME'
alias locs='exec-files nvim $HOME/.local'

# aliases and functions
alias saf='search-alias-functions'
search-alias-functions(){
    echo '\e[1;34mNames\e[0m'
    print -l ${(ok)functions} | grep $1;
    echo '\e[1;34mAliases\e[0m'
    alias | grep $1;
}
expand-alias () {
  local POSSIBLE_ALIAS
  if [[ ! -z "$1" ]]; then
    POSSIBLE_ALIAS="$(alias $1)"
    if [[ ! -z "$POSSIBLE_ALIAS" ]]; then
      echo "${POSSIBLE_ALIAS#*=}"
    else
      echo "$1"
    fi
  fi
}

# curls
alias weather='curl wttr.in'
alias news='curl getnews.tech'
alias cheatsheet='curl cheat.sh'
alias rates='curl rate.sx'

# file system
alias .....='cd ../../../../'
alias ....='cd ../../../'
alias ...='cd ../../'
alias ..='cd ..'

# git
export GIT_LOG_PRETTY_FORMAT='%C(green)%h%C(auto)%d%C(reset) - %s | %C(cyan)%an %C(dim)%cr%C(reset)'
alias ga='git add'
alias gaa='git add --all'
alias gb='git branch -v'
alias gc='git clone'
alias gco='git checkout'
alias gd='git diff --ignore-space-at-eol -b -w --ignore-blank-lines'
alias gcm='git-commit'
alias gh='git-log-graph'
alias gl='git log'
alias gph='git push'
alias gpl='git pull'
alias gr='git remote -v'
alias gs='git status -sb --ignore-submodules'
alias gsync='git checkout master && git pull --rebase && git checkout - && git rebase master'
git-commit(){
    git commit -m ${1:-'Refactor'};
    }
git-log-graph(){
    git log --graph --pretty=format:${GIT_LOG_PRETTY_FORMAT} --abbrev-commit --max-count=${1:-10};
    }

# dotfiles
dot () {
    git --git-dir=$HOME/.dotfiles/ --work-tree=$HOME "$@"
    }
alias da='dot add'
alias daa='dot add -u'
alias dcm='dot commit -m'
alias dh='dot-log-graph'
alias ddiff='dot diff --ignore-space-at-eol -b -w --ignore-blank-lines'
alias dl='dot ls-files'
alias dph='dot push'
alias dpl='dot pull'
alias ds='dot status -sb --ignore-submodules'
dot-log-graph() {
    dot log --graph --pretty=format:${GIT_LOG_PRETTY_FORMAT} --abbrev-commit --max-count=${1:-10};
    }

# vscodium
alias c='code .'

# docker
alias dkl='docker ps -a'
alias dkr='docker run --rm'
alias dkrh='docker run --rm -d -p 8081:80'
alias dkrt='docker run --rm -it'

# stack
alias sb='stack build'
alias sc='stack clean'
alias stt='stack ide targets'
alias sg='ghcid --command "stack repl" --test ":main"'
alias sr='stack repl'
alias st='stack test'
alias sn='stack-new'
stack-new(){
    stack new $1 && cd $1 && stack setup && stack build;
    }
alias sup='stack upgrade --force-download'
alias sinit='stack init'

# neo-vim
alias vim='nvim'
alias v='nvim'

# youtube-dl
alias y='youtube-dl'
alias ya='youtube-dl --extract-audio --audio-format m4a --audio-quality 0'

# doom emacs
alias doom="$HOME/.emacs.d/bin/doom"
doom-install(){
    git clone --depth 1 https://github.com/hlissner/doom-emacs $HOME/.emacs.d
    $HOME/.emacs.d/bin/doom install
}

